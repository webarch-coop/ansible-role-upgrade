# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Upgrade Ansible role.
#
# The Webarchitects Upgrade Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Upgrade Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Upgrade Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Skip the tasks in this role
  ansible.builtin.debug:
    msg: "The Upgrade role tasks are not being run since the upgrade variable is false."
  when: not upgrade | bool
  tags:
    - upgrade

- name: Update and upgrade Debian
  block:

    - name: This role needs to be run as root
      ansible.builtin.assert:
        that:
          - ansible_effective_user_id == 0
        quiet: true

    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      environment:
        PATH: /usr/sbin:/usr/bin:/sbin:/bin
      changed_when: false
      check_mode: false
      register: upgrade_ps
      failed_when: upgrade_ps.rc is not regex('^0|47$')

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        upgrade_init: "{{ upgrade_ps.stdout }}"
      when:
        - upgrade_ps.stdout is defined
        - upgrade_ps.rc == 0

    - name: When the exit code is 47 assume is is because this is a chroot
      ansible.builtin.set_fact:
        upgrade_init: chroot
      when:
        - upgrade_ps.stdout is defined
        - upgrade_ps.rc == 47

    - name: Debug the ini system
      ansible.builtin.debug:
        var: upgrade_init
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: The init system is not defined
      ansible.builtin.assert:
        that:
          - upgrade_init is defined
        quiet: true

    - name: Include the Changelog tasks
      ansible.builtin.include_tasks: changelog.yml
      when: upgrade_changelog | bool

    - name: Packages present
      ansible.builtin.apt:
        pkg:
          - needrestart
        state: present
      when: upgrade_init == "systemd"

    - name: Update the apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
      check_mode: false
      changed_when: false

    - name: Check for available updates
      ansible.builtin.apt:
        upgrade: dist
        autoclean: true
        autoremove: true
        update_cache: false
        dpkg_options: force-confdef,force-confold
      environment:
        DEBIAN_FRONTEND: noninteractive
        PATH: /usr/sbin:/usr/bin:/sbin:/bin
      check_mode: true
      changed_when: false
      register: upgrade_apt_check

    - name: Set a fact for the available updates
      ansible.builtin.set_fact:
        upgrade_pkgs: "{{ upgrade_apt_check.stdout_lines | select('regex', '^Inst[ ].*') | map('regex_replace', '^Inst ') | map('regex_replace', '[ ].*$') }}"
      when:
        - upgrade_apt_check.stdout_lines is defined
        - upgrade_apt_check.stdout_lines != []

    - name: Include the upgrade tasks
      ansible.builtin.include_tasks: upgrade.yml
      when:
        - upgrade_pkgs is defined
        - upgrade_pkgs != []

    - name: Check the existance of the chroot path
      ansible.builtin.stat:
        path: "{{ upgrade_chroot }}"
      register: upgrade_chroot_path

    - name: Chroot tasks
      block:

        - name: Check that /etc/debian_version exists in the chroot
          ansible.builtin.stat:
            path: "{{ upgrade_chroot }}/etc/debian_version"
          register: upgrade_chroot_etc_debian_version

        - name: Check that apt-get is present in the chroot
          block:

            - name: Check that apt-get exists in the chroot
              ansible.builtin.stat:
                path: "{{ upgrade_chroot }}/usr/bin/apt-get"
              register: upgrade_chroot_apt_path

            - name: Conditionally include chroot tasks
              ansible.builtin.include_tasks: chroot.yml
              when: upgrade_chroot_apt_path.stat.exists | bool

          when: upgrade_chroot_etc_debian_version.stat.exists | bool

      when: upgrade_chroot_path.stat.exists | bool

    - name: Check if /usr/sbin/needrestart is present
      ansible.builtin.stat:
        path: /usr/sbin/needrestart
      register: upgrade_needrestart_bin

    - name: Restart services and reboot
      block:

        - name: Run needrestart
          ansible.builtin.command: /usr/sbin/needrestart -b
          environment:
            PATH: /usr/sbin:/usr/bin:/sbin:/bin
          check_mode: false
          changed_when: false
          register: upgrade_needrestart_cmd

        - name: Set facts for needrestart, services that need restarting and systemd daemon-reexec
          ansible.builtin.set_fact:
            # Note that the JC ini parser results in a max of one service being listed see https://github.com/kellyjonbrazil/jc/issues/339
            upgrade_needrestart_yaml: "{{ upgrade_needrestart_cmd.stdout | string | community.general.jc('ini') }}"
            upgrade_services: "{{ upgrade_needrestart_cmd.stdout_lines | select('regex', '^NEEDRESTART-SVC[:]') | select('regex', '[.]service$') | map('regex_replace', '^NEEDRESTART-SVC: ') }}"
            upgrade_systemd_daemon_reexec: "{{ upgrade_needrestart_cmd.stdout_lines | select('regex', '^NEEDRESTART-SVC[:]') | select('regex', ' systemd-manager$') | map('regex_replace', '^NEEDRESTART-SVC: ') | bool }}"

        - name: No services require a restart  # noqa: jinja[spacing]
          ansible.builtin.debug:
            msg: "{{ upgrade_debug_msg | trim }}"
          vars:
            upgrade_debug_msg: >-
              The restart services tasks are being skipped because
              {%- if not upgrade_restart | bool %} upgrade_restart is False
              {%- elif upgrade_reboot | bool and upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is defined and upgrade_needrestart_yaml['NEEDRESTART-KSTA'] == "3" %} the server is to be rebooted
              {%- elif upgrade_services == [] %} no services require a restart{%- elif not upgrade_systemd_daemon_reexec | bool %} a systemd daemon-reexec is not required{%- endif -%}
          when: >-
            ( not upgrade_restart | bool ) or
            ( upgrade_reboot | bool and upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is defined and upgrade_needrestart_yaml['NEEDRESTART-KSTA'] == "3" ) or
            ( upgrade_services == [] ) or
            ( not upgrade_systemd_daemon_reexec | bool )

        - name: Restart services
          block:

            - name: Restarting services
              ansible.builtin.debug:
                msg: "{{ upgrade_debug_msg | trim }}"
              vars:
                upgrade_debug_msg: >-
                  Including the restart services tasks as upgrade_restart is {{ upgrade_restart }}, upgrade_reboot is {{ upgrade_reboot }} and
                  {% if upgrade_services != [] %}the upgrade_services list contains {{ upgrade_services | join(', ') }}
                  {% elif upgrade_systemd_daemon_reexec | bool %}upgrade_systemd_daemon_reexec is {{ upgrade_systemd_daemon_reexec }}
                  {% endif -%}

            - name: Include the restart tasks
              ansible.builtin.include_tasks: restart.yml

          when:
            - ( not upgrade_reboot | bool ) or ( upgrade_needrestart_yaml['NEEDRESTART-KSTA'] != "3" )
            - upgrade_restart | bool
            - ( upgrade_services != [] ) or ( upgrade_systemd_daemon_reexec | bool )

        - name: A reboot is not required
          ansible.builtin.debug:
            msg: "{{ upgrade_debug_msg | trim }}"
          vars:
            upgrade_debug_msg: >-
              The running kernel {{ upgrade_needrestart_yaml['NEEDRESTART-KCUR'] }} is the latest so a reboot is not required
          when: >-
            ( upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is not defined ) or
            ( ( upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is defined ) and
            ( upgrade_needrestart_yaml['NEEDRESTART-KSTA'] != "3" ) )

        - name: A reboot is required but is to be skipped
          ansible.builtin.debug:
            msg: "{{ upgrade_debug_msg | trim }}"
          vars:
            upgrade_debug_msg: >-
              {{ upgrade_needrestart_yaml['NEEDRESTART-KCUR'] }} is the current running kernel and
              {{ upgrade_needrestart_yaml['NEEDRESTART-KEXP'] }} is the expected kernel
              but upgrade_reboot is {{ upgrade_reboot }} so the reboot tasks are being skipped
          when:
            - not upgrade_reboot | bool
            - upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is defined
            - upgrade_needrestart_yaml['NEEDRESTART-KSTA'] == "3"

        - name: Reboot server
          block:

            - name: Rebooting server
              ansible.builtin.debug:
                msg: "{{ upgrade_debug_msg | trim }}"
              vars:
                upgrade_debug_msg: >-
                  Including the reboot server tasks as the upgrade_reboot variable is set to {{ upgrade_reboot }} and
                  {{ upgrade_needrestart_yaml['NEEDRESTART-KCUR'] }} is the current running kernel and
                  {{ upgrade_needrestart_yaml['NEEDRESTART-KEXP'] }} is the expected kernel

            - name: Include the reboot tasks
              ansible.builtin.include_tasks: reboot.yml

          when:
            - upgrade_reboot | bool
            - upgrade_needrestart_yaml['NEEDRESTART-KSTA'] is defined
            - upgrade_needrestart_yaml['NEEDRESTART-KSTA'] == "3"

      when:
        - upgrade_needrestart_bin.stat.exists | bool
        - upgrade_init is defined
        - upgrade_init == "systemd"

  when: upgrade | bool
  tags:
    - upgrade
...
