---
- name: Update and upgrade Debian
  block:

    - name: Packages present
      ansible.builtin.apt:
        pkg:
          - needrestart
        state: present

    - name: Update the apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
      check_mode: false
      changed_when: false

    - name: Check for available updates
      ansible.builtin.apt:
        upgrade: dist
        autoclean: true
        autoremove: true
        update_cache: false
        dpkg_options: force-confdef,force-confold
      environment:
        DEBIAN_FRONTEND: noninteractive
        PATH: /usr/sbin:/usr/bin:/sbin:/bin
      check_mode: true
      changed_when: false
      register: upgrade_apt_check

    - name: Set a fact for the available updates
      ansible.builtin.set_fact:
        upgrade_pkgs: "{{ upgrade_apt_check.stdout_lines | select('regex', '^Inst[ ].*') | map('regex_replace', '^Inst ') | map('regex_replace', '[ ].*$') }}"
      when:
        - upgrade_apt_check.stdout_lines is defined
        - upgrade_apt_check.stdout_lines != []

    - name: Include the upgrade tasks
      ansible.builtin.include_tasks: upgrade.yml
      when:
        - upgrade_pkgs is defined
        - upgrade_pkgs != []

    - name: Check the existance of the chroot path
      ansible.builtin.stat:
        path: "{{ upgrade_chroot }}"
      register: upgrade_chroot_path

    - name: Chroot tasks
      block:

        - name: Check that apt-get exists in the chroot
          ansible.builtin.stat:
            path: "{{ upgrade_chroot }}/usr/bin/apt-get"
          register: upgrade_chroot_apt_path

        - name: Conditionally include chroot tasks
          ansible.builtin.include_tasks: chroot.yml
          when: upgrade_chroot_apt_path.stat.exists | bool

      when: upgrade_chroot_path.stat.exists | bool

    - name: Check if /usr/sbin/needrestart is present
      ansible.builtin.stat:
        path: /usr/sbin/needrestart
      register: upgrade_needrestart_bin

    - name: Restart services and reboot
      block:

        - name: Check if system has been booted with systemd as init system
          ansible.builtin.command: ps -p 1 -o comm=
          environment:
            PATH: /usr/sbin:/usr/bin:/sbin:/bin
          changed_when: false
          check_mode: false
          register: upgrade_init

        - name: Run needrestart
          ansible.builtin.command: /usr/sbin/needrestart -b
          environment:
            PATH: /usr/sbin:/usr/bin:/sbin:/bin
          check_mode: false
          changed_when: false
          register: upgrade_needrestart_cmd

        - name: Set facts for needrestart, services that need restarting and systemd daemon-reexec
          ansible.builtin.set_fact:
            # Note that the JC ini parser results in a max of one service being listed see https://github.com/kellyjonbrazil/jc/issues/339
            upgrade_needrestart_yaml: "{{ upgrade_needrestart_cmd.stdout | community.general.jc('ini') }}"
            upgrade_services: "{{ upgrade_needrestart_cmd.stdout_lines | select('regex', '^NEEDRESTART-SVC[:]') | select('regex', '[.]service$') | map('regex_replace', '^NEEDRESTART-SVC: ') }}"
            upgrade_systemd_daemon_reexec: "{{ upgrade_needrestart_cmd.stdout_lines | select('regex', '^NEEDRESTART-SVC[:]') | select('regex', ' systemd-manager$') | map('regex_replace', '^NEEDRESTART-SVC: ') | bool }}"

        - name: Include the restart tasks
          ansible.builtin.include_tasks: restart.yml
          when:
            - not upgrade_reboot | bool
            - upgrade_restart | bool
            - upgrade_init.stdout == "systemd"
            - ( upgrade_services != [] ) or ( upgrade_systemd_daemon_reexec | bool )

        - name: Include the reboot tasks
          ansible.builtin.include_tasks: reboot.yml
          when: upgrade_reboot | bool

      when: upgrade_needrestart_bin.stat.exists | bool

  when: upgrade | bool
  tags:
    - upgrade
...
