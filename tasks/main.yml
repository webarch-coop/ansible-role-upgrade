---
# TODO add checks for wp-cli, docker-compose and other tools not updating using system packages

# The logchange script is in the https://git.coop/webarch/scripts repo
- name: Check the existance of /usr/local/bin/logchange
  ansible.builtin.stat:
    path: /usr/local/bin/logchange
  register: upgrade_logchange
  tags:
    - upgrade

- name: Update the apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
  tags:
    - upgrade

- name: Apt packages present
  ansible.builtin.apt:
    pkg:
      - apt
      - apt-listchanges
      - apt-show-versions
      - apt-transport-https
      - apt-utils
      - aptitude
      - python3-apt
    state: latest
    update_cache: false
  register: upgrade_apt
  tags:
    - upgrade

- name: Apticron present
  ansible.builtin.apt:
    pkg:
      - apticron
    state: present
  when: upgrade_apticron | bool
  tags:
    - upgrade

- name: Package python-apt present for Debian Jessie and Stretch
  ansible.builtin.apt:
    pkg: python-apt
  when: ansible_distribution_release is regex('jessie|stretch')

- name: Update the Changelog if apt packages have been installed or updated
  ansible.builtin.command: "logchange '{{ upgrade_apt.stdout | quote }} : updated'"
  when: (upgrade_logchange.stat.exists | bool) and (upgrade_apt.changed | bool)
  tags:
    - upgrade

# Unlike `apt-show-versions -b -u` the following will also list new packages
- name: Check for updates and new packages using apt-get dist-upgrade -q -s
  ansible.builtin.shell: apt-get -fq dist-upgrade -s | grep '^The following' -A1 | grep '^ ' | xargs
  args:
    warn: false
    executable: /bin/bash
  environment:
    DEBIAN_FRONTEND: noninteractive
  check_mode: false
  changed_when: false
  register: upgrade_packages
  tags:
    - upgrade

- name: When upgrade_packages is defined and not empty
  block:

    - name: Standard out from apt-get dist-upgrade
      ansible.builtin.debug:
        msg: "Standard out from `apt-get -fq dist-upgrade -s | grep '^The following' -A1 | grep '^ ' | xargs` : {{ upgrade_packages.stdout }}"
        verbosity: 2
      when: upgrade_packages.stdout is defined

    - name: Standard error from apt-get dist-upgrade
      ansible.builtin.debug:
        msg: "Standard error from `apt-get -fq dist-upgrade -q | grep '^The following' -A1 | grep '^ ' | xargs` : {{ upgrade_packages.stderr }}"
        verbosity: 2
      when: upgrade_packages.stderr is defined

    - name: Print the list of packages to be upgraded
      ansible.builtin.debug:
        msg: "The following packages are to be upgraded: {{ upgrade_packages.stdout }}"

    - name: Dist upgrade
      ansible.builtin.apt:
        upgrade: dist
        update_cache: false
        autoclean: true
        autoremove: true
        dpkg_options: force-confold
      register: upgrade_dist_upgrade
      environment:
        PATH: /bin:/sbin:/usr/bin:/usr/sbin

    - name: Debugging
      block:

        - name: Standard out from aptitude dist-upgrade
          ansible.builtin.debug:
            msg: "Standard out from `aptitude dist-upgrade` : {{ upgrade_dist_upgrade.stdout }}"
            verbosity: 2
          when: upgrade_dist_upgrade.stdout | length > 0
          tags:
            - upgrade

        - name: Standard error from aptitude dist-upgrade
          ansible.builtin.debug:
            msg: "Standard error from `aptitude dist-upgrade` : {{ upgrade_dist_upgrade.stderr }}"
            verbosity: 2
          when: upgrade_dist_upgrade.stderr | length > 0

      when: upgrade_dist_upgrade is defined
      tags:
        - upgrade

    - name: Update the Changelog
      ansible.builtin.command: "logchange '{{ upgrade_packages.stdout | quote }} : updated'"
      when: upgrade_logchange.stat.exists | bool

    - name: Aptitude clean
      ansible.builtin.command: aptitude clean
      register: upgrade_aptitude_clean

    - name: Standard out from aptitude clean
      ansible.builtin.debug:
        msg: "Standard out from `aptitude clean` : {{ upgrade_aptitude_clean }}"
        verbosity: 2
      when: (upgrade_aptitude_clean is defined) and (upgrade_aptitude_clean | length > 0)

    - name: Restart Docker if it has been updated
      ansible.builtin.service:
        name: docker
        state: restarted
      when: ("docker-ce" in upgrade_dist_upgrade.stdout) or ("containerd.io" in upgrade_dist_upgrade.stdout)

  when: (upgrade_packages is defined) and (upgrade_packages.stdout | length > 0)
  tags:
    - upgrade

- name: Check the existance of /chroot
  ansible.builtin.stat:
    path: /chroot
  register: upgrade_chroot
  tags:
    - upgrade
    - chroot

- name: Conditionally include chroot tasks
  ansible.builtin.include_tasks: chroot.yml
  when: upgrade_chroot.stat.exists | bool
  tags:
    - upgrade
    - chroot

- name: Check the existance of /etc/munin/plugins/apt_all
  ansible.builtin.stat:
    path: /etc/munin/plugins/apt_all
  register: upgrade_munin_plugin_apt_all
  tags:
    - upgrade
    - munin

- name: Conditionally include munin tasks
  ansible.builtin.include_tasks: munin.yml
  when: upgrade_munin_plugin_apt_all.stat.exists | bool
  tags:
    - upgrade
    - munin
...
